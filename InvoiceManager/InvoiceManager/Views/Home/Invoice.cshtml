@model InvoiceManager.Models.ViewModels.EditInvoiceViewModel

@{
    ViewBag.Title = Model.Heading;
}

<h1 class="mt-3">@Model.Heading</h1>

@if (Model.Invoice.Id != 0)
{
    <button class="btn btn-primary mb-3"
            onclick='window.location.href="@Url.Action("InvoicePosition", "Home",
            new { invoiceId = Model.Invoice.Id })"'>
        Dodaj pozycję
    </button>

    <button class="btn btn-secondary mb-3"
            onclick="generatePdf()">
        Generuj PDF
    </button>
}

<div class="row">

    <div class="col-lg-6">
        @using (Html.BeginForm("Invoice", "Home"))
        {
            if (Model.Invoice.Id == 0)
            {
                <p class="alert alert-info mt-4 mb-4">
                    Pola tytuł, klient, sposób płatności i termin są
                    <strong>wymagane</strong>.
                </p>
            }

            @Html.HiddenFor(x => x.Invoice.Id)
            @Html.HiddenFor(x => x.Invoice.UserId)
            @Html.HiddenFor(x => x.Invoice.CreatedDate)

            <div class="mb-3">
                @Html.LabelFor(x => x.Invoice.Title, new { @class = "form-label mb-2" })
                @Html.TextBoxFor(x => x.Invoice.Title,
                    new { @class = "form-control", autofocus = "autofocus" })
            </div>

            <div class="mb-3">
                @Html.LabelFor(x => x.Invoice.ClientId, new { @class = "mb-2" })
                @Html.DropDownListFor(x => x.Invoice.ClientId,
                    new SelectList(Model.Clients, "Id", "Name"), "-- Wybierz klienta --",
                    new { @class = "form-control" })
            </div>

            if (Model.Invoice.Id != 0)
            {
            <div class="mb-3">
                @Html.LabelFor(x => x.Invoice.Value, new { @class = "mb-2" })
                @Html.TextBoxFor(x => x.Invoice.Value,
                    new { @class = "form-control", @readonly = "readonly" })
            </div>
            }

            <div class="mb-3">
                @Html.LabelFor(x => x.Invoice.MethodOfPaymentId, new { @class = "mb-2" })
                @Html.DropDownListFor(x => x.Invoice.MethodOfPaymentId,
                    new SelectList(Model.MethodOfPayments, "Id", "Name"), "-- Wybierz metodę płatności --",
                    new { @class = "form-control" })
            </div>

            <div class="mb-3">
                @Html.LabelFor(x => x.Invoice.PaymentDate, new { @class = "mb-2" })
                @Html.TextBoxFor(x => x.Invoice.PaymentDate, "{0:dd-MM-yyyy}",
                    new
                    {
                        @class = "form-control",
                        @id = "PaymentDate",
                        autocomplete = "off"
                    })
            </div>

            <div class="mb-3">
                @Html.LabelFor(x => x.Invoice.Comments, new { @class = "mb-2" })
                @Html.TextAreaFor(x => x.Invoice.Comments,
                    new { @class = "form-control" })
            </div>

            <button class="btn btn-primary btn-lg mb-5" type="submit">
                Zapisz
            </button>
        }

    </div>
 

    <div class="col-5 offset-lg-1">
        @if (Model.Invoice.Id != 0)
        {
            @Html.Partial("_InvoicePosition", Model.Invoice.InvoicePositions)
        }
    </div>

</div>

@section Scripts
{
    <script type="text/javascript">

        function deleteInvoicePosition() {

            if (!confirm("Czy na pewno chcesz usunąć pozycję?"))
                return;

        }

        function generatePdf() {


        }
        $(document).ready(function () {
            $('#PaymentDate').datepicker({
                format: "dd-mm-yyyy",
                language: "pl",
                multidate: false,
                autoclose: true,
                todayHighlight: true,
                forceParse: false
            });
        });

    </script>
}